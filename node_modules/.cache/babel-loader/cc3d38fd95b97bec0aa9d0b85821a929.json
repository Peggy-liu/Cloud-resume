{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liupeiqi/Desktop/cloudresume/src/BlogArticle.js\";\nimport Theme from './Theme';\nimport Photo from './Photo';\nimport amplify from './images/amplify.png';\nimport schema from './images/schema.png';\nimport ses from './images/ses.png';\n\nconst BlogArticle = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(Theme, {\n      titleBoxStyle: \"post-title-box\",\n      titleStyle: \"post-title\",\n      titleValue: \"BLOG POST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"article\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"article_title\",\n        children: \"Create a full-stack web application using AWS Amplify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: amplify,\n        name: \"amplify and react\",\n        credit: \"https://medium.com/better-programming/build-a-react-app-with-authentication-using-aws-amplify-49db1dfdc290\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [' ', \"In this post, I will introduce the features and implementations of this cloud space application, whose entire stack is built completely using AWS Amplify. Besides, I would also like to share with you a few problems I encountered when making this application, and hopefully this can save you some times googling around for the solutions.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"disclaimer\",\n        children: \"Disclaimer: This is my first attempt of designing and creating full stack application using fronend framework and javascript (I usually focus on developing and writing backend code in Java), there might be something that is wrong or not the best practice. If you notice anything, please let me know, and it is highly appreciated to get feed back from you! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The tutorial from AWS Amplify official website is a good starting point to learn and start building your own application. If you are also new to AWS Amplify like myself, I would highly recommend this tutorial series from\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://docs.amplify.aws/start/getting-started/setup/q/integration/react\",\n          children: \"Amazon.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), \"I will not go into details about every aspects of implementations. This blog post will only focus on the features implemented for this application. If you are interested about all the details, you are welcome to visit the official tutorial website listed above.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"IMPLEMENT A VISITOR DASHBOARD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The visitor dashboard is implemented on the home page to record the number of visitors. The visitor number is persisted in AWS DynamoDB-a NoSQL database. Amplify makes it extremely intuitive and easy for us to implement and integrate the whole technology stack. A GraphQL API is created, as well as a GraphQL schema and a DynamoDB table. You only need to provide Amplify your data schema, and all the API operations and database table will be created automatically.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Below is the data schema for the visitor dashboard.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: schema,\n        alt: \"schema pic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"At the first render of the home page, visitor count will be fetched from the database through the API. The value will then be updated locally and remotely again through API, the new value will be rendered through the updated local state value. All these operations is combined into one asyncronous function and will only be invoked once on the first render using 'useEffect' react hook.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"One of the problems I've encountered was that I kept getting invalid response from the graphql API. The reason behind this is because I didn't comply to the contract given by the API. This is the wrong API call made by react:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"graphqlOperation(updateVisitorCount, \", \"{ id: '1', count: num + 1 }\", \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"And this is what's specified in the schema: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"updateVisitorCount(input: UpdateVisitorCountInput!, condition: ModelvisitorCountConditionInput): visitorCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"input UpdateVisitorCountInput \", \"{id: ID!  count: Int}\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Comparing two statements above, you will notice that the input I passed to the first wrong statement is incomplete-- you need to insert the input as it is specified in the schema. The correct format is as following: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"graphqlOperation(updateVisitorCount, \", \"{input : { id: '1', count: num + 1 }}\", \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"PROCESS MY CV DYNAMICALLY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Instead of putting my CV content statically in html, I put my CV in json file and format them in a organised way so that I could process and render the content dynamically using JSX. This way if I wish to update my CV content, I could do it directly in the json file without worrying about HTML rendering of the content. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"IMPLEMENT EMAIL NOTIFICATION FOR CONTACT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I have implemented a contact form in the 'Contact Me' page. When a visitor fill out the form and hit submit, it will send a post request to a RestAPI implemented using AWS APIGateway, which will subsequently trigger a lambda function in the cloud. Inside the lambda function, it will utilise AWS SES(Simple Email Service) to send a formatted email to my personal email address.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: ses,\n        alt: \"ses code segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BlogArticle;\nexport default BlogArticle;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogArticle\");","map":{"version":3,"sources":["/Users/liupeiqi/Desktop/cloudresume/src/BlogArticle.js"],"names":["Theme","Photo","amplify","schema","ses","BlogArticle"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,sBACE;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,aAAa,EAAC,gBADhB;AAEE,MAAA,UAAU,EAAC,YAFb;AAGE,MAAA,UAAU,EAAC;AAHb;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,EAAE,EAAC,SAAR;AAAA,8BACE;AAAI,QAAA,EAAE,EAAC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AACE,QAAA,GAAG,EAAEH,OADP;AAEE,QAAA,IAAI,EAAC,mBAFP;AAGE,QAAA,MAAM,EAAC;AAHT;AAAA;AAAA;AAAA;AAAA,cAJF,eASE;AAAA,mBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAiBE;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAmBE;AAAA,mPAIuB,GAJvB,eAKE;AAAG,UAAA,IAAI,EAAC,0EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCF,eAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,eA0CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CF,eA2CE;AAAK,QAAA,GAAG,EAAEC,MAAV;AAAkB,QAAA,GAAG,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cA3CF,eA4CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CF,eAoDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApDF,eA0DE;AAAA,4DAA2C,6BAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DF,eA2DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DF,eA4DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DF,eA6DE;AAAA,qDAAoC,uBAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cA7DF,eA8DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9DF,eAgEM;AAAA,4DAA2C,uCAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,cAhEN,eAiEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjEF,eAkEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlEF,eAoEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApEF,eAqEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArEF,eAyEE;AAAK,QAAA,GAAG,EAAEC,GAAV;AAAe,QAAA,GAAG,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAzEF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoFD,CArFD;;KAAMC,W;AAuFN,eAAeA,WAAf","sourcesContent":["import Theme from './Theme'\nimport Photo from './Photo'\nimport amplify from './images/amplify.png'\nimport schema from './images/schema.png'\nimport ses from './images/ses.png'\n\nconst BlogArticle = () => {\n  return (\n    <div id='post'>\n      <Theme\n        titleBoxStyle='post-title-box'\n        titleStyle='post-title'\n        titleValue='BLOG POST'\n      />\n      <div id='article'>\n        <h2 id='article_title'>\n          Create a full-stack web application using AWS Amplify\n        </h2>\n        <Photo\n          src={amplify}\n          name='amplify and react'\n          credit='https://medium.com/better-programming/build-a-react-app-with-authentication-using-aws-amplify-49db1dfdc290'\n        />\n        <p>\n          {' '}\n          In this post, I will introduce the features and implementations of\n          this cloud space application, whose entire stack is built completely\n          using AWS Amplify. Besides, I would also like to share with you a few\n          problems I encountered when making this application, and hopefully\n          this can save you some times googling around for the solutions.\n        </p>\n        <p className='disclaimer'>Disclaimer: This is my first attempt of designing and creating full stack application using fronend framework and javascript (I usually focus on developing and writing \n        backend code in Java), there might be something that is wrong or not the best practice. If you notice anything, please let me know, and it is highly appreciated to get feed back from you! </p>\n        <p>\n          The tutorial from AWS Amplify official website is a good starting\n          point to learn and start building your own application. If you are\n          also new to AWS Amplify like myself, I would highly recommend this\n          tutorial series from{' '}\n          <a href='https://docs.amplify.aws/start/getting-started/setup/q/integration/react'>\n            Amazon.\n          </a>\n          I will not go into details about every aspects of implementations.\n          This blog post will only focus on the features implemented for this\n          application. If you are interested about all the details, you are\n          welcome to visit the official tutorial website listed above.\n        </p>\n        <h2>IMPLEMENT A VISITOR DASHBOARD</h2>\n        <p>\n          The visitor dashboard is implemented on the home page to record the\n          number of visitors. The visitor number is persisted in AWS DynamoDB-a\n          NoSQL database. Amplify makes it extremely intuitive and easy for us\n          to implement and integrate the whole technology stack. A GraphQL API\n          is created, as well as a GraphQL schema and a DynamoDB table. You only\n          need to provide Amplify your data schema, and all the API operations\n          and database table will be created automatically.\n        </p>\n        <span>Below is the data schema for the visitor dashboard.</span>\n        <img src={schema} alt='schema pic'></img>\n        <p>\n          At the first render of the home page, visitor count will be fetched\n          from the database through the API. The value will then be updated\n          locally and remotely again through API, the new value will be rendered\n          through the updated local state value. All these operations is\n          combined into one asyncronous function and will only be invoked once\n          on the first render using 'useEffect' react hook.\n        </p>\n        <p>\n          One of the problems I've encountered was that I kept getting invalid\n          response from the graphql API. The reason behind this is because I\n          didn't comply to the contract given by the API.\n          This is the wrong API call made by react:\n        </p>\n        <pre>graphqlOperation(updateVisitorCount, {\"{ id: '1', count: num + 1 }\"})</pre>\n        <p>And this is what's specified in the schema: </p>\n        <pre>updateVisitorCount(input: UpdateVisitorCountInput!, condition: ModelvisitorCountConditionInput): visitorCount</pre>\n        <pre>input UpdateVisitorCountInput {\"{id: ID!  count: Int}\"}</pre>\n        <p>Comparing two statements above, you will notice that the input I passed to the first wrong statement is incomplete-- you need to insert the input as it is specified \n            in the schema. The correct format is as following: </p>\n            <pre>graphqlOperation(updateVisitorCount, {\"{input : { id: '1', count: num + 1 }}\"})</pre>\n        <h2>PROCESS MY CV DYNAMICALLY</h2>\n        <p>Instead of putting my CV content statically in html, I put my CV in json file and format them in a organised way so that I could process and render the content dynamically using JSX. This way\n          if I wish to update my CV content, I could do it directly in the json file without worrying about HTML rendering of the content. </p>\n        <h2>IMPLEMENT EMAIL NOTIFICATION FOR CONTACT</h2>\n        <p>I have implemented a contact form in the 'Contact Me' page. When a visitor fill out the form and hit submit, it will send a post request to a RestAPI implemented using AWS \n          APIGateway, which will subsequently trigger a lambda function in the cloud. Inside the lambda function, it will utilise AWS SES(Simple Email Service) to send a formatted email to\n          my personal email address.\n        </p>\n        <img src={ses} alt='ses code segment'></img>\n      </div>\n    </div>\n  )\n}\n\nexport default BlogArticle\n"]},"metadata":{},"sourceType":"module"}