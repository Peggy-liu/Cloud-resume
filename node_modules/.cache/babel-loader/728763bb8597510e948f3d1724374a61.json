{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/liupeiqi/Desktop/cloudresume/src/BlogArticle.js\";\nimport Theme from './Theme';\nimport Photo from './Photo';\nimport amplify from './images/amplify.png';\nimport schema from './images/schema.png';\nimport contact from './images/contact.png';\nimport email from './images/email.png';\nimport archi from './images/archi.png';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport workflow from './images/workflow.png';\n\nconst BlogArticle = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(Theme, {\n      titleBoxStyle: \"post-title-box\",\n      titleStyle: \"post-title\",\n      titleValue: \"BLOG POST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"article\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"article_title\",\n        children: \"Create a full-stack web application using AWS Amplify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: amplify,\n        name: \"amplify and react\",\n        credit: \"https://medium.com/better-programming/build-a-react-app-with-authentication-using-aws-amplify-49db1dfdc290\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [' ', \"In this post, I will introduce the features and implementations of this cloud space application, whose entire stack is built completely using AWS Amplify. Besides, I would also like to share with you a few problems I encountered when making this application, and hopefully this can save you some times googling around for the solutions.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The idea of creating this web space is inspired by an initiative by Forrest Brazeal, a cloud resume challenge(which is overdue by the end of July, 2020). Feel free to check out this awesome challenge through the link\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://cloudresumechallenge.dev/instructions/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), '. ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"disclaimer\",\n        children: [\"Disclaimer: This is my first attempt of designing and creating full stack application using fronend framework and javascript (I usually focus on developing and writing backend code in Java), there might be something that is wrong or not the best practice. If you notice anything, please let me know, and it is highly appreciated to get feed back from you!\", ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The tutorial from AWS Amplify official website is a good starting point to learn and start building your own application. If you are also new to AWS Amplify like myself, I would highly recommend this tutorial series from\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://docs.amplify.aws/start/getting-started/setup/q/integration/react\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Amazon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), '. ', \"I will not go into details about every aspects of implementations. This blog post will only focus on the features implemented for this application. If you are interested about all the details, you are welcome to visit the official tutorial website listed above.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [' ', /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blog/#archi\",\n              children: \"ARCHITECTURE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blog/#workflow\",\n              children: \"WORKFLOW USING AMPLIFY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blog/#visitor\",\n              children: \"IMPLEMENT A VISITOR DASHBOARD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blog/#cv\",\n              children: \"PROCESS MY CV DYNAMICALLY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/blog/#email\",\n              children: \"IMPLEMENT EMAIL NOTIFICATION FOR CONTACT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"archi\",\n        children: \"ARCHITECTURE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The front end of the application is build using React. And the back end infrastructure is created using amplify, who under-the-hood is using CloudFormation to create and manage the infrastructures. In order to use AWS backend service in our front end, AWS provides us with several libraries, and they are intalled into our react project using npm.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: archi,\n        name: \"amplify and react\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"workflow\",\n        children: \"WORKFLOW USING AMPLIFY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: workflow,\n        name: \"amplify workflow\",\n        credit: \"https://docs.amplify.aws/cli/teams/overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The AWS Amplify Console provides a Git-based workflow for building, deploying, and hosting your Amplify web app \\u2014 both the frontend and backend \\u2014 from source control. You can easily connect the git-based repository of your choice to Amplify, and on each commit made to the repository, a new build will be initiated in Amplify. For the simplicity, I've only maintained two branches--main and dev, for my project. You can build several application based on the branch you connect to, and you can even connect to different backend to frontend of your choice--frontend and backend are maintained seperately in Amplify which provides us with huge flexibility. To create a new backend environment for a particular branch, use Amplify CLI.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"visitor\",\n        children: \"IMPLEMENT A VISITOR DASHBOARD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The visitor dashboard is implemented on the home page to record the number of visitors. The visitor number is persisted in AWS DynamoDB-a NoSQL database. Amplify makes it extremely intuitive and easy for us to implement and integrate the whole technology stack. A GraphQL API is created, as well as a GraphQL schema and a DynamoDB table. You only need to provide Amplify your data schema, and all the API operations and database table will be created automatically.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Below is the data schema for the visitor dashboard.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: schema,\n        name: \"schema pic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"At the first render of the home page, visitor count will be fetched from the database through the API. The value will then be updated locally and remotely again through API, the new value will be rendered through the updated local state value. All these operations is combined into one asyncronous function and will only be invoked once on the first render using 'useEffect' react hook.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"One of the problems I've encountered was that I kept getting invalid response from the graphql API. The reason behind this is because I didn't comply to the contract given by the API. This is the wrong API call made by react:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"graphqlOperation(updateVisitorCount, \", \"{ id: '1', count: num + 1 }\", \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"And this is what's specified in the schema: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: \"updateVisitorCount(input: UpdateVisitorCountInput!, condition: ModelvisitorCountConditionInput): visitorCount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"input UpdateVisitorCountInput \", '{id: ID!  count: Int}']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comparing two statements above, you will notice that the input I passed to the first wrong statement is incomplete-- you need to insert the input as it is specified in the schema. The correct format is as following:\", ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"graphqlOperation(updateVisitorCount,\", ' ', \"{input : { id: '1', count: num + 1 }}\", \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"cv\",\n        children: \"PROCESS MY CV DYNAMICALLY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Instead of putting my CV content statically in html, I put my CV in json file and format them in a organised way so that I could process and render the content dynamically using JSX. This way if I wish to update my CV content, I could do it directly in the json file without worrying about HTML rendering of the content.\", ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"email\",\n        children: \"IMPLEMENT EMAIL NOTIFICATION FOR CONTACT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I have implemented a contact form in the 'Contact Me' page. When a visitor fill out the form and hit submit, it will send a post request to a RestAPI implemented using AWS APIGateway, which will subsequently trigger a lambda function in the cloud. Inside the lambda function, it will utilise AWS SES(Simple Email Service) to send a formatted email to my personal email address. If the API respond is successful, it will prompt a success message to the visitor with their name, otherwise an error message will be prompted instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: contact,\n        name: \"ses code segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Photo, {\n        src: email,\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BlogArticle;\nexport default BlogArticle;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogArticle\");","map":{"version":3,"sources":["/Users/liupeiqi/Desktop/cloudresume/src/BlogArticle.js"],"names":["Theme","Photo","amplify","schema","contact","email","archi","HashLink","Link","workflow","BlogArticle"],"mappings":"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","sourcesContent":["import Theme from './Theme'\nimport Photo from './Photo'\nimport amplify from './images/amplify.png'\nimport schema from './images/schema.png'\nimport contact from './images/contact.png'\nimport email from './images/email.png'\nimport archi from './images/archi.png'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport workflow from './images/workflow.png'\n\nconst BlogArticle = () => {\n  return (\n    <div id='post'>\n      <Theme\n        titleBoxStyle='post-title-box'\n        titleStyle='post-title'\n        titleValue='BLOG POST'\n      />\n      <div id='article'>\n        <h2 id='article_title'>\n          Create a full-stack web application using AWS Amplify\n        </h2>\n        <Photo\n          src={amplify}\n          name='amplify and react'\n          credit='https://medium.com/better-programming/build-a-react-app-with-authentication-using-aws-amplify-49db1dfdc290'\n        />\n        <p>\n          {' '}\n          In this post, I will introduce the features and implementations of\n          this cloud space application, whose entire stack is built completely\n          using AWS Amplify. Besides, I would also like to share with you a few\n          problems I encountered when making this application, and hopefully\n          this can save you some times googling around for the solutions.\n        </p>\n        <p>\n          The idea of creating this web space is inspired by an initiative by\n          Forrest Brazeal, a cloud resume challenge(which is overdue by the end\n          of July, 2020). Feel free to check out this awesome challenge through\n          the link{' '}\n          <a\n            href='https://cloudresumechallenge.dev/instructions/'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            here\n          </a>\n          {'. '}\n        </p>\n        <p className='disclaimer'>\n          Disclaimer: This is my first attempt of designing and creating full\n          stack application using fronend framework and javascript (I usually\n          focus on developing and writing backend code in Java), there might be\n          something that is wrong or not the best practice. If you notice\n          anything, please let me know, and it is highly appreciated to get feed\n          back from you!{' '}\n        </p>\n        <p>\n          The tutorial from AWS Amplify official website is a good starting\n          point to learn and start building your own application. If you are\n          also new to AWS Amplify like myself, I would highly recommend this\n          tutorial series from{' '}\n          <a\n            href='https://docs.amplify.aws/start/getting-started/setup/q/integration/react'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            Amazon\n          </a>\n          {'. '}I will not go into details about every aspects of\n          implementations. This blog post will only focus on the features\n          implemented for this application. If you are interested about all the\n          details, you are welcome to visit the official tutorial website listed\n          above.\n        </p>\n        <div>\n          <h3>Content</h3>\n          <ul>\n            <li>\n              {' '}\n              <Link to='/blog/#archi'>ARCHITECTURE</Link>\n            </li>\n            <li>\n              <Link to='/blog/#workflow'>WORKFLOW USING AMPLIFY</Link>\n            </li>\n            <li>\n              <Link to='/blog/#visitor'>IMPLEMENT A VISITOR DASHBOARD</Link>\n            </li>\n            <li>\n              <Link to='/blog/#cv'>PROCESS MY CV DYNAMICALLY</Link>\n            </li>\n            <li>\n              <Link to='/blog/#email'>\n                IMPLEMENT EMAIL NOTIFICATION FOR CONTACT\n              </Link>\n            </li>\n          </ul>\n        </div>\n\n        <h2 id='archi'>ARCHITECTURE</h2>\n        <p>\n          The front end of the application is build using React. And the back\n          end infrastructure is created using amplify, who under-the-hood is\n          using CloudFormation to create and manage the infrastructures. In\n          order to use AWS backend service in our front end, AWS provides us\n          with several libraries, and they are intalled into our react project\n          using npm.\n        </p>\n        <Photo src={archi} name='amplify and react' />\n        <h2 id='workflow'>WORKFLOW USING AMPLIFY</h2>\n        <Photo\n          src={workflow}\n          name='amplify workflow'\n          credit='https://docs.amplify.aws/cli/teams/overview'\n        />\n        <p>\n          The AWS Amplify Console provides a Git-based workflow for building,\n          deploying, and hosting your Amplify web app — both the frontend and\n          backend — from source control. You can easily connect the git-based\n          repository of your choice to Amplify, and on each commit made to the\n          repository, a new build will be initiated in Amplify. For the\n          simplicity, I've only maintained two branches--main and dev, for my\n          project. You can build several application based on the branch you\n          connect to, and you can even connect to different backend to frontend\n          of your choice--frontend and backend are maintained seperately in\n          Amplify which provides us with huge flexibility. To create a new\n          backend environment for a particular branch, use Amplify CLI.\n        </p>\n        <h2 id='visitor'>IMPLEMENT A VISITOR DASHBOARD</h2>\n        <p>\n          The visitor dashboard is implemented on the home page to record the\n          number of visitors. The visitor number is persisted in AWS DynamoDB-a\n          NoSQL database. Amplify makes it extremely intuitive and easy for us\n          to implement and integrate the whole technology stack. A GraphQL API\n          is created, as well as a GraphQL schema and a DynamoDB table. You only\n          need to provide Amplify your data schema, and all the API operations\n          and database table will be created automatically.\n        </p>\n        <span>Below is the data schema for the visitor dashboard.</span>\n        <Photo src={schema} name='schema pic' />\n        <p>\n          At the first render of the home page, visitor count will be fetched\n          from the database through the API. The value will then be updated\n          locally and remotely again through API, the new value will be rendered\n          through the updated local state value. All these operations is\n          combined into one asyncronous function and will only be invoked once\n          on the first render using 'useEffect' react hook.\n        </p>\n        <p>\n          One of the problems I've encountered was that I kept getting invalid\n          response from the graphql API. The reason behind this is because I\n          didn't comply to the contract given by the API. This is the wrong API\n          call made by react:\n        </p>\n        <pre>\n          graphqlOperation(updateVisitorCount, {\"{ id: '1', count: num + 1 }\"})\n        </pre>\n        <p>And this is what's specified in the schema: </p>\n        <pre>\n          updateVisitorCount(input: UpdateVisitorCountInput!, condition:\n          ModelvisitorCountConditionInput): visitorCount\n        </pre>\n        <pre>input UpdateVisitorCountInput {'{id: ID!  count: Int}'}</pre>\n        <p>\n          Comparing two statements above, you will notice that the input I\n          passed to the first wrong statement is incomplete-- you need to insert\n          the input as it is specified in the schema. The correct format is as\n          following:{' '}\n        </p>\n        <pre>\n          graphqlOperation(updateVisitorCount,{' '}\n          {\"{input : { id: '1', count: num + 1 }}\"})\n        </pre>\n        <h2 id='cv'>PROCESS MY CV DYNAMICALLY</h2>\n        <p>\n          Instead of putting my CV content statically in html, I put my CV in\n          json file and format them in a organised way so that I could process\n          and render the content dynamically using JSX. This way if I wish to\n          update my CV content, I could do it directly in the json file without\n          worrying about HTML rendering of the content.{' '}\n        </p>\n        <h2 id='email'>IMPLEMENT EMAIL NOTIFICATION FOR CONTACT</h2>\n        <p>\n          I have implemented a contact form in the 'Contact Me' page. When a\n          visitor fill out the form and hit submit, it will send a post request\n          to a RestAPI implemented using AWS APIGateway, which will subsequently\n          trigger a lambda function in the cloud. Inside the lambda function, it\n          will utilise AWS SES(Simple Email Service) to send a formatted email\n          to my personal email address. If the API respond is successful, it\n          will prompt a success message to the visitor with their name,\n          otherwise an error message will be prompted instead.\n        </p>\n        <Photo src={contact} name='ses code segment' />\n        <Photo src={email} name='email' />\n      </div>\n    </div>\n  )\n}\n\nexport default BlogArticle\n"]},"metadata":{},"sourceType":"module"}